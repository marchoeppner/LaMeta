// output directory
params.outdir="output"

/*
File with group information. Contains sample name (has to match the names parsed
by the input channel) and group membership separated by tab.
*/
params.groupfile="groupfile.txt"

// Whether input reads are single-ended
params.singleEnd = false

// Threshold below which reads should be discarded after trimming
params.readminlen="60"

// k-mers for single-sample metagenome assembly with Spades
params.spades_kmers="21,33,55"

// minimum completeness for dRep (should not be lower than 50)
params.mincomp="50"

/*
Configure from which step the real processes start. All outputs of the skipped
processes are expected to be where they would be when the scripts were run.
0: from start
1: after qc
2: after assemblies
3: after binning
*/
params.startfrom=3

/*
Specify the relevant config based on execution context
*/
profiles {
	standard {
		includeConfig 'conf/rzcluster.config'
	}
	lownum {
		includeConfig 'conf/rzcluster_lownum.config'
	}
	queue16 {
                includeConfig 'conf/rzcluster_a.config'
        }
}

trace {
	enabled = true
	file = 'LaMeta_processing_trace.txt'
	fields = 'task_id,name,status,exit,realtime,%cpu,rss'
}

manifest {
	homePage = 'https://github.com/mruehlemann/LaMeta.git'
	description = 'This pipeline assembles and annotates metagenomic data'
	mainScript = 'main.nf'
	version = '1.0'
	nextflowVersion = '0.18.01'
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
