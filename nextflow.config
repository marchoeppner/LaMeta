/*
LaMeta Main Config file
*/

process.container = 'mhoeppner/lameta:1.0'

params {
	help = false

	host_index = false

	outdir="results"

	run_name = false

	spades_kmers = "21,33,55"

	adapters = false

	host = false

	checkm_db = false

	checkm_db_url = "https://data.ace.uq.edu.au/public/CheckM_databases/checkm_data_2015_01_16.tar.gz"

	email = false

	skip_multiqc = false

	groupfile = false

	readminlen="60"

	spades_kmers="21,33,55"

	mincomp="50"

}

/*
Specify the relevant config based on execution context
*/
profiles {
	standard {
		includeConfig 'conf/base.config'
		includeConfig 'conf/rzcluster.config'
	}
	ccga_singularity {
		includeConfig 'conf/base.config'
		includeConfig 'conf/rzcluster_new.config'
		includeConfig 'conf/singularity.config'
	}
	ccga_conda {
		includeConfig 'conf/base.config'
		includeConfig 'conf/rzcluster_new.config'
		includeConfig 'conf/conda.config'
	}
}

timeline {
	enabled = true
	file = "${params.outdir}/pipeline_info/LaMeta_timeline.html"
}
report {
	enabled = true
	file = "${params.outdir}/pipeline_info/LaMeta_report.html"
}
trace {
	enabled = true
	file = "${params.outdir}/pipeline_info/LaMeta_trace.txt"
}
dag {
	enabled = true
	file = "${params.outdir}/pipeline_info/LaMeta_dag.svg"
}


manifest {
	homePage = 'https://github.com/mruehlemann/LaMeta.git'
	description = 'This pipeline assembles and annotates metagenomic data'
	mainScript = 'main.nf'
	version = '1.0'
	nextflowVersion = '0.18.01'
}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
